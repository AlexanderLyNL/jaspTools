% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{run}
\alias{run}
\title{Run a JASP analysis in R.}
\usage{
run(name, dataset, options, perform = "run", view = TRUE, quiet = FALSE,
  sideEffects = FALSE)
}
\arguments{
\item{name}{String indicating the name of the analysis to run. This name is
identical to that of the main function in a JASP analysis.}

\item{dataset}{Data.frame or string; if it's a string it must match one of
the JASP datasets (e.g., "debug").}

\item{options}{List of options to supply to the analysis (see also
\code{JASPTools::analysisOptions}).}

\item{perform}{String containing either "run" (default) or "init".}

\item{view}{Boolean indicating whether to view the results in a webbrowser.}

\item{quiet}{Boolean indicating whether to suppress messages from the
analysis.}

\item{sideEffects}{Boolean or character vector indicating which side effects
are allowed.  Side effects are persistent changes made by JASPTools or
analyses run in JASPTools, they include loading of packages ("pkgLoading"),
setting of .libPaths ("libPaths"), modifying of global options() ("options")
and altering the global environment ("globalEnv"). Supply the desired side
effects in a character vector (or simply TRUE for all). JASPTools will make
an effort to prevent any side effect not included in the vector (or all if
set to FALSE)}
}
\description{
\code{run} makes it possible to execute a JASP analysis in R. Usually this
process is a bit cumbersome as there are a number of objects unique to the
JASP environment. Think .ppi, data-reading, etc. These (rcpp) objects are
replaced in the JASPTools so you do not have to deal with them. Note that
\code{run} sources JASP analyses every time it runs, so any change in
analysis code between calls is incorporated. The output of the analysis is
shown automatically through a call to \code{JASPTools::view} and returned
invisibly.
}
\examples{

options <- JASPTools::analysisOptions("BinomialTest")
options[["variables"]] <- "contBinom"
JASPTools::run("BinomialTest", "debug", options)

# Above and below are identical (below is taken from the Qt terminal)

options <- JASPTools::analysisOptions('{
   "id" : 6,
   "name" : "BinomialTest",
   "options" : {
      "VovkSellkeMPR" : false,
      "confidenceInterval" : false,
      "confidenceIntervalInterval" : 0.950,
      "descriptivesPlots" : false,
      "descriptivesPlotsConfidenceInterval" : 0.950,
      "hypothesis" : "notEqualToTestValue",
      "plotHeight" : 300,
      "plotWidth" : 160,
      "testValue" : 0.50,
      "variables" : [ "contBinom" ]
   },
   "perform" : "run",
   "revision" : 1,
   "settings" : {
      "ppi" : 192
   }
}')
JASPTools::run("BinomialTest", "debug", options)

# If we want R functions sourced to the global env
JASPTools::run("BinomialTest", "debug", options, sideEffects="globalEnv")

# Or additionally have the .libPaths() set to JASP<e2><80><99>s R packages
JASPTools::run("BinomialTest", "debug", options, sideEffects=c("globalEnv", "libPaths"))

}
